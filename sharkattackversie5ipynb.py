# -*- coding: utf-8 -*-
"""sharkattackversie5ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RMacrUKyHO8-6SQ_NpztxzIbVHTsYBaF
"""

# Commented out IPython magic to ensure Python compatibility.
from os import read
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# %load_ext google.colab.data_table
shark_df = pd.read_csv("/content/attacks.csv",encoding ='cp1252')
shark_df

shark_df.columns = shark_df.columns.str.strip()
shark_df.columns

clean1 =shark_df.drop(['Case Number', 'Date', 'Year', 'Country', 'Area', 'Location','Time','Investigator or Source', 'pdf', 'href formula', 'href',
       'Case Number.1', 'Case Number.2', 'original order', 'Unnamed: 22','Unnamed: 23'],axis=1)

clean2 = clean1.dropna(how='all')
clean2

clean2.Activity.unique()

Activity_df = shark_df

clean2.Age.unique()

def set_age(value):
  try:
    return int(value)
  except:
    return np.nan
set_age("Young")

"""vervolgens maak ik van de age kolom een kolom waarin alleen cijfers staan."""

view_age = clean2.Age == 'Age'
display (clean2.loc[view_age])
new_age = clean2.Age.apply(set_age)
#clean2.loc [view_age,'Age'] = clean2.loc [view_age, new_age]
print (new_age.unique())
#print(len(new_age[new_age<12]))
#print (len(new_age))

clean2.assign(NewAge = new_age)
clean2[[ "NewAge"]] = clean2[["NewAge"]].apply(pd.to_numeric)
clean2.columns
clean2

clean3 =shark_df.drop(['Case Number', 'Date', 'Year', 'Country', 'Area', 'Location','Time','Investigator or Source', 'pdf', 'href formula', 'href',
       'Case Number.1', 'Case Number.2', 'original order', 'Unnamed: 22','Unnamed: 23'],axis=1)

clean4 = clean3.dropna(how='all')
clean4.columns.str.strip()

clean2.Age.count()
new_age.value_counts()

"""Er zijn ongeveer 215( 206 plus 9 kinderen onder de twaalf jaar en in totaal 3369 mensen die getroffen zijn door een haai."""

kids = pd.cut (clean2.NewAge, bins = (0.0,12.0,25.0,99.0), labels = ['Child','Young adult','Adult']).head(10)
#clean4.loc[new_age,] = clean4.loc[kids, 'Child' ]
kids

"""de variabele kids dient om makkelijker te kunnen zien hoeveel kinderen tov volwassenen worden getroffen door een attack van haaien."""

kids_mask = clean2.NewAge == 'Child'
display (clean2.loc[kids_mask])
#clean4.loc[new_age, 'Child'] = clean4.loc[new_age, kids]

sha_att= clean4.groupby(['Type'])
sha_att.get_group('Unprovoked')

clean2.assign (NewAge_1= 'kids')
clean2['NewAge_1'] = kids
clean2.columns
clean2

jong = clean2['NewAge_1'].value_counts().head(50)
schade = sha_att ['Injury'].apply(lambda x: x.str.contains ('FATAL').sum())

jong1 = jong.sort_index()

jong1.plot(kind = 'pie')

"""het aandeel van kinderen(child) is kleiner dan van de jong volwassenen en volwassenen"""

schade

clean5 = clean4[['Injury','NewAge']]
filt = clean5['Injury'] == 'FATAL'
clean6 = clean5.loc[filt]
clean6.set_index ('NewAge')
clean6.value_counts().head(50)
clean6.sort_index

"""uit clean 6 blijkt dat het aantal fatal voor kineren veel lager is dan voor volwassenen."""

clean4.Injury.value_counts()

clean4.Species.unique()

sha_att= clean4.groupby(['Type'])
sha_att.get_group('Provoked')
sha_att.get_group('Unprovoked')

sha_att= clean4.groupby(['Species'])
sha_att.get_group('White shark')

sha_att['Injury'].value_counts().loc["White shark"].head(50)

sha_att['Injury'].value_counts().loc["Tiger shark"].head(50)

sha_att['Injury'].apply(lambda x: x.str.contains('FATAL').sum())

"""uit deze code blijkt dat veel meer Unprovoked leiden (1155) tot fatal injuries dan provoked (15)"""

sha_att= clean4.groupby(['Activity'])
sha_att.get_group('Paddling')

sha_att['Activity'].value_counts().loc["Surfing"]

sha_att= clean2.groupby(['Species'])
sha_att.get_group('Grey reef shark')

from wordcloud import WordCloud
words=clean4['Activity'].tolist()
words=''.join(str(words))
plt.figure(figsize=(12,12))
plt.imshow(WordCloud().generate(words))

"""Deze code geeft weer welke activiteiten tot de grootste attacks leiden."""

shark = clean4.groupby(['Species'],as_index=False).size()
shark = shark.sort_values(by=['size'], ascending=False)
shark.drop([783,1033,1045,1044,409,480,152,109,941,943,87,350,454,411,231,324],inplace=True)
shark = shark[0:4]

mlabels=['White shark','Tiger shark','Bull shark','Wobbegong shark']
plt.pie(shark['size'],labels=mlabels,autopct='%1.1f%%')
plt.title('percentage share between the 4 most dangerous sharks')
fig = plt.gcf()
fig.set_size_inches(12,12)
plt.show()

"""uit deze plot blijkt het aandeel van de gevaarlijkste haaien."""